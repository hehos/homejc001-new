@charset "UTF-8";
/* 百科页面样式 */
.index-baike-list em, #location em, .hot-photos em {
  margin: 0 3px;
  color: #bd0401; }

.index-baike-list em {
  font-weight: bold; }

#header {
  margin-bottom: 0; }

.index-top-cates {
  margin-left: -0.7%; }
  .index-top-cates .cate {
    float: left;
    width: 32.63333%;
    padding: 1em 0;
    margin-left: 0.7%;
    background-color: #fbfbfb;
    border: 1px solid #eceeef; }
  .index-top-cates .left-glyph {
    height: 4.92857em;
    text-align: center;
    padding: 0 2.07143em;
    vertical-align: middle;
    border-right: 1px solid #eceeef;
    color: #bd0401; }
    .index-top-cates .left-glyph p {
      white-space: nowrap;
      margin-top: 13px;
      font-size: 1.14286em;
      font-weight: bold; }
  .index-top-cates .label-cate {
    padding: 0 1.78571em; }
    .index-top-cates .label-cate .label {
      margin-top: 0;
      margin-bottom: 0; }
  .index-top-cates .label-title {
    color: #6f787f;
    font-size: 1.16667em;
    margin-top: .2em; }

.index-baike-list {
  padding: 1.07143em 1.71429em;
  border: 1px solid #eceeef; }
  .index-baike-list .media-newsitem {
    padding-bottom: 2.8em;
    border-bottom: 1px dashed #eceeef; }
  .index-baike-list .media-title {
    font-size: 1.45em;
    margin-bottom: .8em; }
  .index-baike-list .thumbnail {
    padding: 1px;
    border: 1px solid #eceeef; }
  .index-baike-list .img-title {
    line-height: 24px;
    text-align: center;
    margin-top: 1px;
    font-size: 0.85714em;
    background-color: #fbfbfb; }
  .index-baike-list .media-text {
    line-height: 2.14286em; }
  .index-baike-list .media-other i {
    margin: 0 0 0 5px; }
  .index-baike-list .labels {
    line-height: 1.8;
    margin-bottom: 1em;
    overflow: hidden;
    font-size: 0.85714em;
    color: #373a3c; }
    .index-baike-list .labels a {
      float: left;
      margin-right: 4px;
      padding: 0 .8em;
      border: 1px solid #dddddd;
      border-radius: 10px;
      background-color: #f2f3f4; }
  .index-baike-list .media-newsitem .media-other {
    bottom: -2.0em; }

.yuyue-form {
  background-color: #f8f8f8; }
  .yuyue-form .form-tab li:hover, .yuyue-form .form-tab li.on {
    background-color: #fff; }

.hot-labels .label-bar {
  padding: 0;
  line-height: 3; }
.hot-labels .label {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 10em;
  padding-left: 0.71429em;
  padding-right: 0.71429em;
  background-color: #f8f8f8;
  margin-bottom: 0.71429em;
  margin-right: 0.71429em; }

.rd-zx-tabs .tabs-base li {
  width: 50%; }
  .rd-zx-tabs .tabs-base li.on, .rd-zx-tabs .tabs-base li:hover {
    font-weight: bold; }
.rd-zx-tabs .list-group-item {
  margin-bottom: 0;
  border-bottom: 1px dashed #dddddd;
  color: #55595c;
  font-size: 0.85714em; }
  .rd-zx-tabs .list-group-item .right-info {
    color: #55595c; }

.hot-brands .label-bar {
  line-height: 1.4;
  padding: 0.71429em 0.42857em;
  border-bottom: 1px solid #eceeef; }
.hot-brands .label {
  margin-right: 1.2em; }
.hot-brands .item-labels {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding: 0.85714em 0.42857em;
  line-height: 1;
  color: #55595c; }
  .hot-brands .item-labels span {
    display: inline-block;
    padding: 0 12px; }
    .hot-brands .item-labels span:first-child {
      font-weight: bold;
      padding-left: 0;
      border-right: 1px solid #eceeef; }
  .hot-brands .item-labels .right-info {
    font-size: 0.85714em;
    color: #818a91; }
.hot-brands .item .icon-minus, .hot-brands .item .label-bar {
  display: none; }
.hot-brands .item.on .item-labels {
  background-color: #f8f8f8; }
  .hot-brands .item.on .item-labels span:first-child {
    color: #bd0401; }
.hot-brands .item.on .icon-plus {
  display: none; }
.hot-brands .item.on .icon-minus {
  display: inline-block; }
.hot-brands .item.on .label-bar {
  display: block;
  height: auto; }

.hot-photos .cont-block:before, .hot-photos .cont-block:after {
  content: " ";
  display: table; }
.hot-photos .cont-block:after {
  clear: both; }
.hot-photos .media-base {
  float: left;
  width: 50%;
  padding: 0 1em;
  margin-bottom: 0.71429em; }
  .hot-photos .media-base .thumbnail, .hot-photos .media-base .img {
    padding: 2px 3px; }
.hot-photos .media-explain {
  font-size: 0.85714em; }

.newstype-detail {
  border: 1px solid #eceeef; }

.correlation-cont {
  background-color: #eceeef;
  padding: 0 12px 12px; }
  .correlation-cont .title-bar .title {
    color: #bd0401;
    font-size: 1.14286em; }
  .correlation-cont .cont-line {
    padding: 1.07143em 1.28571em 0.71429em;
    background-color: #fff;
    border-bottom: 1px dashed #dddddd; }
  .correlation-cont .media-base, .correlation-cont .list-group {
    float: left;
    width: 33.33333%;
    padding: 0 1.92857em; }
  .correlation-cont .media-base {
    margin: 0;
    padding: 0 1.92857em; }
    .correlation-cont .media-base .thumbnail {
      height: 142px;
      line-height: 138.5px; }
  .correlation-cont .media-title {
    text-align: center; }
  .correlation-cont .list-dot .list-group-item:before {
    display: inline-block;
    width: 0;
    height: 0;
    vertical-align: middle;
    border-left: 3px solid #bd0401;
    border-top: 3px solid transparent;
    border-bottom: 3px solid transparent;
    border-right: 0 dotted;
    -webkit-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    transform: rotate(360deg);
    background-color: transparent;
    margin-top: -3px; }
  .correlation-cont .list-dot .list-group-item {
    padding-top: 3px;
    padding-bottom: 3px; }



/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=../../map/pages-main/baike.css.map */
