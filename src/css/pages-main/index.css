@charset "UTF-8";
.title-bar {
  padding-bottom: 0.35714em;
  margin: 1.42857em 0;
  border-bottom: 1px solid #eceeef; }
  .title-bar .title {
    font-size: 1.71429em; }
    .title-bar .title a:hover {
      color: inherit;
      text-decoration: none; }

#links, .index-flow, .index-hot {
  margin-top: 1.07143em; }

.index-title .title {
  color: #bd0401;
  font-weight: bold; }

.index-hot:before, .index-hot:after {
  content: " ";
  display: table; }
.index-hot:after {
  clear: both; }

.hot-tab {
  font-size: 1.28571em;
  font-weight: bold;
  color: #818a91; }
  .hot-tab .tabs-nav1 > li {
    width: 33.33333%; }
  .hot-tab span {
    text-transform: capitalize; }
  .hot-tab li > a {
    border-color: #eceeef;
    border-bottom: none;
    color: #55595c; }
    .hot-tab li > a:hover, .hot-tab li > a:focus {
      text-decoration: none; }
  .hot-tab li:hover, .hot-tab li.on {
    background-color: #eeeff0; }

.hot-cates, .hot-sort {
  float: left; }

.hot-cates {
  position: relative; }
  .hot-cates .left-btn, .hot-cates .right-btn {
    position: absolute;
    top: 50%;
    z-index: 1000;
    width: 40px;
    height: 80px;
    line-height: 80px;
    margin-top: -40px;
    text-align: center;
    cursor: pointer;
    font-size: 3.42857em;
    font-family: "宋体", serif;
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#B3000000, endColorstr=#B3000000)";
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#B3000000, endColorstr=#B3000000);
    background-color: rgba(0, 0, 0, 0.7);
    color: #fff; }
  .hot-cates .left-btn {
    left: 0; }
  .hot-cates .right-btn {
    right: 0; }

.hot-conts {
  padding: 1.42857em;
  border: 1px solid #eceeef; }
  .hot-conts:before, .hot-conts:after {
    content: " ";
    display: table; }
  .hot-conts:after {
    clear: both; }

.hot-cates {
  width: 80%; }

.hot-sort {
  width: 20%;
  padding-left: 1.42857em; }
  .hot-sort .sort-title i {
    float: left;
    margin-right: .7em; }
  .hot-sort .sort-title {
    padding-bottom: 0.35714em;
    color: #bd0401;
    border-bottom: 1px solid #bd0401; }
    .hot-sort .sort-title h3 {
      font-size: 1.42857em;
      font-weight: bold; }
  .hot-sort li {
    padding: 1.07143em 0; }
    .hot-sort li:before, .hot-sort li:after {
      content: " ";
      display: table; }
    .hot-sort li:after {
      clear: both; }
    .hot-sort li img {
      width: 100%;
      vertical-align: middle; }
    .hot-sort li .img {
      float: left;
      width: 4.4em;
      height: 4.4em;
      line-height: 4.4em;
      margin-right: 0.71429em;
      overflow: hidden;
      border: 1px solid #818a91;
      border-radius: 50%; }
    .hot-sort li .media-cont {
      line-height: 2.2; }
    .hot-sort li h4 {
      color: #000;
      font-size: 1.2em;
      font-family: "Microsoft Yahei", Tahoma, Arial, Helvetica, STHeiti; }
    .hot-sort li .link-text {
      color: #91b81d;
      font-family: Arial, Helvetica, serif;
      font-size: .8em; }

.hot-cate .hot-item .tran-layer, .xiaoguo-bigimg .xiaoguo-item .tran-layer {
  padding: 0.71429em 1.07143em;
  font-family: "Microsoft YaHei", "Microsoft JhengHei", STHeiti, MingLiu; }
.hot-cate .hot-item .media-title, .xiaoguo-bigimg .xiaoguo-item .media-title {
  font-size: 1.71429em; }

.hot-cate {
  margin-right: -2%; }
  .hot-cate:before, .hot-cate:after {
    content: " ";
    display: table; }
  .hot-cate:after {
    clear: both; }
  .hot-cate img {
    width: 100%; }
  .hot-cate .hot-item {
    float: left;
    width: 31.33333%;
    margin-right: 2%; }
    .hot-cate .hot-item .tran-layer {
      font-weight: bold;
      -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#B3FFFFFF, endColorstr=#B3FFFFFF)";
      filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#B3FFFFFF, endColorstr=#B3FFFFFF);
      background-color: rgba(255, 255, 255, 0.7); }
    .hot-cate .hot-item .media-title {
      color: #373a3c; }
    .hot-cate .hot-item p {
      color: #55595c;
      font-size: 1.14286em; }

.xiaoguo-cont:before, .xiaoguo-cont:after {
  content: " ";
  display: table; }
.xiaoguo-cont:after {
  clear: both; }
.xiaoguo-cont .xiaoguo-bigimg, .xiaoguo-cont .xiaoguo-smallimg {
  float: left; }
.xiaoguo-cont .xiaoguo-bigimg {
  width: 40%; }
  .xiaoguo-cont .xiaoguo-bigimg .xiaoguo-item p {
    color: #b5bcc0; }
.xiaoguo-cont .xiaoguo-smallimg {
  width: 60%; }
  .xiaoguo-cont .xiaoguo-smallimg .smallimg-left {
    float: left;
    width: 66.66667%; }
  .xiaoguo-cont .xiaoguo-smallimg .smallimg-right {
    float: right;
    width: 33.33333%;
    padding-left: 1.21429em; }
.xiaoguo-cont .smallimg-left .xiaoguo-item.colspan2 {
  width: 100%; }
.xiaoguo-cont .smallimg-left .xiaoguo-item {
  float: left;
  width: 231.5px; }
.xiaoguo-cont .smallimg-left .xiaoguo-item:first-child, .xiaoguo-cont .smallimg-left .xiaoguo-item.last {
  float: right;
  margin-right: 0; }
.xiaoguo-cont .xiaoguo-item {
  overflow: hidden;
  margin-bottom: 1.42857em;
  margin-right: 1.21429em; }
.xiaoguo-cont .smallimg-right .xiaoguo-item {
  margin-right: 0; }
.xiaoguo-cont .xiaoguo-bigimg .xiaoguo-item, .xiaoguo-cont .xiaoguo-smallimg .xiaoguo-item.rowspan2 {
  height: 24.28571em; }
.xiaoguo-cont .xiaoguo-smallimg .xiaoguo-item {
  height: 11.42857em; }

.xiaoguo-cate {
  border: 1px solid #eceeef; }
  .xiaoguo-cate a {
    text-decoration: none; }
  .xiaoguo-cate .title {
    float: left;
    line-height: 6.28571em;
    padding: 0 2.85714em;
    border-right: 1px solid #eceeef; }
  .xiaoguo-cate ul {
    display: block;
    overflow: hidden;
    padding: 1.14286em 0; }
    .xiaoguo-cate ul:before, .xiaoguo-cate ul:after {
      content: " ";
      display: table; }
    .xiaoguo-cate ul:after {
      clear: both; }
  .xiaoguo-cate li {
    display: table-cell;
    width: 1%;
    text-align: center; }
    .xiaoguo-cate li > a {
      display: block; }

.gonglue-cont-line {
  padding-left: 13.71429em;
  margin-bottom: 2.85714em;
  padding-bottom: 1.07143em;
  background: url("../../img/gonglue-bg.png?v=436b7c1c60") no-repeat; }
  .gonglue-cont-line.line1 {
    background-position: 0 0; }
  .gonglue-cont-line.line2 {
    background-position: 0 -166px; }

.gonglue-cont-item {
  float: left; }
  .gonglue-cont-item h4 {
    line-height: 1.2;
    margin-bottom: 0.38889em;
    padding-left: 0.35714em;
    background-color: #f8f8f8;
    font-size: 1.28571em;
    font-family: "Microsoft Yahei", Tahoma, Arial, Helvetica, STHeiti; }
  .gonglue-cont-item .img {
    margin-top: 6px; }
  .gonglue-cont-item .txtlist {
    font-size: 0.85714em;
    line-height: 2.4; }

.brand-cont {
  border-right: 1px dashed #eceeef;
  border-bottom: 1px dashed #eceeef; }
  .brand-cont li {
    float: left;
    width: 16.66667%;
    margin-left: -1px;
    margin-top: -1px;
    text-align: center;
    padding: 0.71429em;
    border-left: 1px dashed #eceeef;
    border-top: 1px dashed #eceeef; }
  .brand-cont .title {
    margin-top: 0.57143em; }



/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=../../map/pages-main/index.css.map */
